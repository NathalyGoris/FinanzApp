@page "/registro-Deudas"
@page "/registro-Deudas/{DeudaId:int}"
@inject HttpClient httpClient
@inject NotificationService notificationServices
@inject NavigationManager NavigationManager


<h3 class="text-primary">Registro de Deudas</h3>

<EditForm Model="deudas">
    <DataAnnotationsValidator />
    <div class="col-md-4">
        <label>ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="deudas.DeudaId" class="form-control" />
                <button type="button" class="btn btn-outline-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
            </div>
    </div>
    <div class="form-group">
        <label for="Fecha" class="text-muted">Fecha:</label>
        <InputDate required id="Fecha" @bind-Value="deudas.Fecha" class="form-control" />
        <ValidationMessage For="@(() => deudas.Fecha)" />
    </div>
    <div class="form-group">
        <label for="NombreAcreedor" class="text-muted">NombreAcreedor:</label>
        <InputText required id="NombreAcreedor" @bind-Value="deudas.NombreAcreedor" class="form-control" />
        <ValidationMessage For="@(() => deudas.NombreAcreedor)" />
    </div> 
    <div class="form-group">
        <label for="TipoDeuda" class="text-muted">TipoDeuda:</label>
        <InputSelect required id="Categoria" @bind-Value="deudas.TipoDeuda" class="form-control">
            @if (TipoDeuda != null)
            {
                if (string.IsNullOrEmpty(deudas.TipoDeuda))
                {
                    deudas.TipoDeuda = TipoDeuda.FirstOrDefault();
                }
                @foreach (var item in TipoDeuda)
                {
                    <option value="@item">@item</option>
                }
            }
        </InputSelect>
    </div> 
    <div class="form-group">
        <label for="MontoTotal" class="text-muted">MontoTotal:</label>
        <InputNumber required id="MontoTotal" @bind-Value="deudas.MontoTotal" class="form-control" />
        <ValidationMessage For="@(() => deudas.MontoTotal)" />
    </div>  
    <div class="card-footer d-flex justify-content-center">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
            <button type="button" class="btn btn-outline-success" @onclick="Guardar">Guardar <i class="oi oi-document" /></button>
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
        </div>
    </div>
</EditForm>

@code {
    // P
    [Parameter]
    public int DeudaId { get; set; }
    public Deudas deudas { get; set; } = new Deudas(); 
    public string Mensaje { get; set; } = string.Empty;
    public List<string> TipoDeuda = new List<string> { 
    "Préstamo personal",
    "Tarjeta de crédito",
    "Préstamo hipotecario",
    "Deuda estudiantil",
    "Deuda médica",
    "Deuda fiscal (por ejemplo, impuestos adeudados)",
    "Deuda de servicios públicos (por ejemplo, electricidad, agua)"};
    private void RegistrarIngreso()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        if(DeudaId>0)
        {
            this.deudas.DeudaId = DeudaId;
            await this.Buscar();
        }
    }


    public async Task<bool> Buscar()
    {
        try
        {
            var deudaencontrada = await httpClient.GetFromJsonAsync<Deudas>($"api/Deudas/{deudas.DeudaId}");

            if (deudaencontrada != null)
            {
                this.deudas = deudaencontrada;
                StateHasChanged();
                notificationServices.ShowNotification("Encontrado", "El Id a sido encontrado con exito", NotificationSeverity.Success);
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            notificationServices.ShowNotification("Error", "El Id NO a sido encontrado", NotificationSeverity.Error);
            return false;
        }
    }

    public bool Validar()
    {
        bool validar = true;

        if (deudas.MontoTotal <= 0)
        {
            notificationServices.ShowNotification("Error", "El monto debe ser mayor a 0", NotificationSeverity.Error);
            validar = false;
        }
        if (string.IsNullOrEmpty(deudas.NombreAcreedor))
        {
            notificationServices.ShowNotification("Error", "Debe especificar el nombre del acreedor", NotificationSeverity.Error);
            validar = false;
        }

        return validar;
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Deudas", deudas);

        if (Validar())
        {
            if (response.IsSuccessStatusCode)
            {
                var Devuelta = await response.Content.ReadFromJsonAsync<Deudas>();

                if (Devuelta != null)
                {
                    notificationServices.ShowNotification("Guardado", "El registro se ha guardado con éxito", NotificationSeverity.Success);
                    deudas = Devuelta;
                    Nuevo();
                }
                else
                {
                    notificationServices.ShowNotification("Error", "Ingrese un código existente", NotificationSeverity.Error);
                }
            }
            else
            {
                notificationServices.ShowNotification("Error", "Verifique e inténtelo de nuevo", NotificationSeverity.Error);
            }
        }

    }
    public void Nuevo()
    {
        this.deudas = new Deudas();
        Mensaje = string.Empty;
        NavigationManager.NavigateTo("/registro-deudas");
    }
    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Deudas/{deudas.DeudaId}");
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "error";
            return;
        }
        else
            notificationServices.ShowNotification("Eliminado", "El registro se ha eliminado con éxito", NotificationSeverity.Success);
            Nuevo();
    }
}