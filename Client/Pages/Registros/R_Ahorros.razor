@page "/registro-ahorro"
@page "/registro-ahorro/{AhorroId:int}"
@inject HttpClient httpClient
@inject NotificationService notificationServices
@inject NavigationManager NavigationManager


<h3 class="text-primary">Registro de Ahorros</h3>

<EditForm Model="ahorros">
    <DataAnnotationsValidator />
    <div class="col-md-4">
        <label>ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="ahorros.AhorroId" class="form-control" />
                <button type="button" class="btn btn-outline-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
            </div>
    </div>
    <div class="form-group">
        <label for="NombreMeta" class="text-muted">NombreMeta:</label>
        <InputText required id="NombreMeta" @bind-Value="ahorros.NombreMeta" class="form-control" />
        <ValidationMessage For="@(() => ahorros.NombreMeta)" />
    </div> 
    <div class="form-group">
        <label for="Fecha" class="text-muted">Fecha:</label>
        <InputDate required id="Fecha" @bind-Value="ahorros.Fecha" class="form-control" />
        <ValidationMessage For="@(() => ahorros.Fecha)" />
    </div>
    <div class="form-group">
        <label for="MontoMeta" class="text-muted">MontoMeta:</label>
        <InputNumber required id="MontoMeta" @bind-Value="ahorros.MontoMeta" class="form-control" />
        <ValidationMessage For="@(() => ahorros.MontoMeta)" />
    </div>
    <div class="form-group">
        <label for="FrecuenciaAhorro" class="text-muted">FrecuenciaAhorro:</label>
        <InputSelect required id="Categoria" @bind-Value="ahorros.FrecuenciaAhorro" class="form-control">
            @if (FrecuenciaAhorro != null)
            {
                if (string.IsNullOrEmpty(ahorros.FrecuenciaAhorro))
                {
                    ahorros.FrecuenciaAhorro = FrecuenciaAhorro.FirstOrDefault();
                }
                @foreach (var item in FrecuenciaAhorro)
                {
                    <option value="@item">@item</option>
                }
            }
        </InputSelect>
    </div>   
    <div class="card-footer d-flex justify-content-center">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
            <button type="button" class="btn btn-outline-success" @onclick="Guardar">Guardar <i class="oi oi-document" /></button>
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
        </div>
    </div>
</EditForm>

@code {
    // P
    [Parameter]
    public int AhorroId { get; set; }
    public Ahorros ahorros { get; set; } = new Ahorros(); 
    public string Mensaje { get; set; } = string.Empty;
    public List<string> FrecuenciaAhorro = new List<string> { 
    "Diario", 
    "Semanal", 
    "Quincenal", 
    "Mensual", 
    "Bimesensual", 
    "Trimestral", 
    "Semestral", 
    "Anual"};
    private void RegistrarIngreso()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        if(AhorroId>0)
        {
            this.ahorros.AhorroId = AhorroId;
            await this.Buscar();
        }
    }


    public async Task<bool> Buscar()
    {
        try
        {
            var ahorroEncontrado = await httpClient.GetFromJsonAsync<Ahorros>($"api/Ahorros/{ahorros.AhorroId}");

            if (ahorroEncontrado != null)
            {
                this.ahorros = ahorroEncontrado;
                StateHasChanged();
                notificationServices.ShowNotification("Encontrado", "El Id a sido encontrado con exito", NotificationSeverity.Success);
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            notificationServices.ShowNotification("Error", "El Id NO a sido encontrado", NotificationSeverity.Error);
            return false;
        }
    }

    public bool Validar()
    {
        bool validar = true;

        if (string.IsNullOrEmpty(ahorros.NombreMeta))
        {
            notificationServices.ShowNotification("Error", "Debe describir una descripción", NotificationSeverity.Error);
            validar = false;
        }

        if (ahorros.MontoMeta <= 0)
        {
            notificationServices.ShowNotification("Error", "El monto debe ser mayor a 0", NotificationSeverity.Error);
            validar = false;
        }

        return validar;
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Ahorros", ahorros);

        if (Validar())
        {
            if (response.IsSuccessStatusCode)
            {
                var Devuelta = await response.Content.ReadFromJsonAsync<Ahorros>();

                if (Devuelta != null)
                {
                    notificationServices.ShowNotification("Guardado", "El registro se ha guardado con éxito", NotificationSeverity.Success);
                    ahorros = Devuelta;
                    Nuevo();
                }
                else
                {
                    notificationServices.ShowNotification("Error", "Ingrese un código existente", NotificationSeverity.Error);
                }
            }
            else
            {
                notificationServices.ShowNotification("Error", "Verifique e inténtelo de nuevo", NotificationSeverity.Error);
            }
        }

    }
    public void Nuevo()
    {
        this.ahorros = new Ahorros();
        Mensaje = string.Empty;
        NavigationManager.NavigateTo("/registro-ahorro");
    }
    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Ahorros/{ahorros.AhorroId}");
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "error";
            return;
        }
        else
            notificationServices.ShowNotification("Eliminado", "El registro se ha eliminado con éxito", NotificationSeverity.Success);
            Nuevo();
    }
}