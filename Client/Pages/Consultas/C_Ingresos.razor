@page "/ConsultaIngreso"
@inject HttpClient httpClient

<h1 class="text-center">Consulta de ingresos</h1>

<div>
    @if (L_Ingresos == null)
    {
        <p><em>Sin datos para mostrar...</em></p>
    }
    else
    {
        <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="4" PagerHorizontalAlign="HorizontalAlign.Left"
            AllowSorting="true" Data="@L_Ingresos" ColumnWidth="180px">
            <Columns>
                <RadzenGridColumn TItem="Ingresos" Property="IngresoId" Title="ID" />
                <RadzenGridColumn TItem="Ingresos" Property="Fecha" Title="Fecha" />
                <RadzenGridColumn TItem="Ingresos" Property="Monto" Title="Monto" />
                <RadzenGridColumn TItem="Ingresos" Property="Descripcion" Title="DescripciÃ³n" /> 
                <RadzenGridColumn TItem="Ingresos" Property="Categoria" Title="Categoria">                              
                </RadzenGridColumn>
                <RadzenGridColumn TItem="Ingresos" Title="Editar">
                    <Template Context="Ingresos">
                        <RadzenLink Path=@($"/registro-ingresos/{Ingresos.IngresoId}") Text="Ver">
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Ver" />
                        </RadzenLink>
                    </Template>
                </RadzenGridColumn>

            </Columns>
        </RadzenGrid>


    }

</div>

@code
{
    public string Asunto  { get; set; } = "";
    public int Conteo { get; set; } = 0;
    public Ingresos ingresos { get; set; } = new Ingresos();
    public List<Ingresos> L_Ingresos { get; set; } = new List<Ingresos>();

    protected override async Task OnInitializedAsync()
    {
        var ingreso = await httpClient.GetFromJsonAsync<List<Ingresos>>($"api/Ingresos");

        if(ingreso is not null)
        {
            L_Ingresos = ingreso;
        }
    }
}